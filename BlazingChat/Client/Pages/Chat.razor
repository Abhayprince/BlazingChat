@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt;
@inject HttpClient Client

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="card br-0 mt-1">
        <div class="card-header bg-main br-0 text-white">
            <div class="row">
                <div class="col">
                    <h2>BlazingChat</h2>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-warning float-end" @onclick="HandleLogout">Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name">Welcome @AuthenticationState?.User?.Name</label>
                </div>
            </div>
        </div>
        <div class="card-body messages-window bg-light d-flex">
            <div class="row" style="flex: 1">
                <div class="col-sm-2 col-3">
                    <ChatsList Loading="_loadingUsers" Chats="Chats" OnUserSelected="OnUserSelected" />
                </div>
                @*<div class="col-sm-8 col-6 d-flex justify-content-center align-items-center" style="background-color: #f4ecff;">*@
                <div class="col-sm-8 col-6 d-flex px-0">
                    <ChatDetails SelectedUser="_selectedUser" 
                        NewIncomingMessage="@_newIncomingMessage"
                        OnIncomingMessageRecieved = "()=> _newIncomingMessage = null"
                        OnCancel="HandleChatDetailsCancel" />
                </div>
                <div class="col-sm-2 col-3">
                    <UsersList Loading="_loadingUsers" Users="Users" OnUserSelected="OnUserSelected" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private HubConnection? _hubConnection;

    private bool _loadingUsers = false;
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    public IList<UserDto> Chats { get; set; } = new List<UserDto>();

    private UserDto? _selectedUser = null;
    private MessageDto? _newIncomingMessage = null;

    private async Task<bool> IsTokenExpiredAsync()
    {
        var jwt = new JwtSecurityToken(AuthenticationState.Token);
        if (jwt.ValidTo <= DateTime.Now)
        {
            // Token has expired
            // Navigate to login page
            await HandleLogout();
            return true;
        }
        return false;
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            if (!await IsTokenExpiredAsync())
            {
                _hubConnection = ConfigureHubConnection();

                _loadingUsers = true;
                var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);
                var chatListTask = GetClient().GetFromJsonAsync<IList<UserDto>>("api/users/chats", JsonConverter.JsonSerializerOptions);

                await _hubConnection.StartAsync();

                var usersList = await userListTask;
                if (usersList is not null)
                {
                    Users = usersList;
                }

                var chatsList = await chatListTask;
                if (chatsList is not null)
                {
                    Chats = chatsList;
                }
                _loadingUsers = false;
                await _hubConnection.SendAsync(nameof(IBlazingChatHubServer.SetUserOnline), AuthenticationState.User);
                StateHasChanged();
            }
        }
    }

    private HttpClient GetClient()
    {
        Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthenticationState.Token);
        return Client;
    }

    private async Task OnUserSelected(UserDto user)
    {
        _selectedUser = user;

        var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
        if(selectedChatUser is not null)
        {
            selectedChatUser.IsSelected = false;
        }

        var chatUser = Chats.FirstOrDefault(c => c.Id == user.Id);
        if(chatUser is null)
        {
            user.IsSelected = true;
            Chats.Add(user);
        }
        else
        {
            chatUser.IsSelected = true;
        }

    }

    private async Task HandleChatDetailsCancel(bool shouldRemoveFromChatsList)
    {
        if (shouldRemoveFromChatsList)
        {
            Chats.Remove(_selectedUser);
        }
        _selectedUser = null;
    }

    private async Task HandleLogout()
    {
        await JsRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
        //NavigationManager.NavigateTo("/");
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
                            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/blazing-chat"),
                               options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
                            .Build();

        hubConnection.On<UserDto>(nameof(IBlazingChatHubClient.UserConnected), (newUser) =>
        {
            Users.Add(newUser);
            StateHasChanged();
        });

        hubConnection.On<ICollection<UserDto>>(nameof(IBlazingChatHubClient.OnlineUsersList), (onlineUsers) =>
        {
            foreach (var user in Users)
            {
                if (onlineUsers.Any(u => u.Id == user.Id))
                {
                    user.IsOnline = true;
                }
            }
            StateHasChanged();
        });

        hubConnection.On<int>(nameof(IBlazingChatHubClient.UserIsOnline), (userId) =>
        {
            var user = Users.FirstOrDefault(u => u.Id == userId);
            if (user is not null)
            {
                user.IsOnline = true;
                StateHasChanged();
            }
        });

        hubConnection.On<MessageDto>(nameof(IBlazingChatHubClient.MessageRecieved), (messageDto) =>
        {
            var fromUser = Users.FirstOrDefault(u => u.Id == messageDto.FromUserId);

            if (!Chats.Any(c => c.Id == messageDto.FromUserId))
            {
                Chats.Insert(0, fromUser!);
            }
            else
            {
                if (_selectedUser?.Id == messageDto.FromUserId)
                {
                    // Append the message to the messages list
                    _newIncomingMessage = messageDto;
                }
            }
            StateHasChanged();
        });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
