@using System.ComponentModel;
@implements IDisposable
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<CascadingValue Value="AuthenticationState" Name="AuthenticationState">
    <div class="container-fluid">
        @Body
    </div>
</CascadingValue>

@code {
    // NOTE: Ideally it should be used a separate service class, register it as singleton service
    // and then inject it on all the pages an components which need this AuthenticationState
    //  I have used is as Cascading Parameter to simply show how CascadingParameters work
    public AuthenticationState AuthenticationState { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        var authStateJson = await JsRuntime.InvokeAsync<string>("window.getFromStorage", AuthenticationState.AuthStoreKey);
        if (!string.IsNullOrWhiteSpace(authStateJson))
        {
            var authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);
            AuthenticationState.LoadState(authState);

            if (AuthenticationState.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/chat");
            }
        }

        AuthenticationState.PropertyChanged += AuthenticationStateChanged;
    }

    private void AuthenticationStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if(e.PropertyName == nameof(AuthenticationState.IsAuthenticated))
        {
            if (AuthenticationState.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/chat");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public void Dispose()
    {
        AuthenticationState.PropertyChanged -= AuthenticationStateChanged;
    }
}

